(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;
  
(* Exception for evaluator runtime, generated by a runtime error in
   the interpreter *)
exception EvalError of string ;;
  
(* Exception for evaluator runtime, generated by an explicit `raise`
   construct in the object language *)
exception EvalException ;;

(*......................................................................
  Environments and values 
 *)

module type ENV = sig
    (* the type of environments *)
    type env
    (* the type of values stored in environments *)
    type value =
      | Val of expr
      | Closure of (expr * env)
   
    (* empty () -- Returns an empty environment *)
    val empty : unit -> env

    (* close expr env -- Returns a closure for `expr` and its `env` *)
    val close : expr -> env -> value

    (* lookup env varid -- Returns the value in the `env` for the
       `varid`, raising an `Eval_error` if not found *)
    val lookup : env -> varid -> value

    (* extend env varid loc -- Returns a new environment just like
       `env` except that it maps the variable `varid` to the `value`
       stored at `loc`. This allows later changing the value, an
       ability used in the evaluation of `letrec`. To make good on
       this, extending an environment needs to preserve the previous
       bindings in a physical, not just structural, way. *)
    val extend : env -> varid -> value ref -> env

    (* env_to_string env -- Returns a printable string representation
       of environment `env` *)
    val env_to_string : env -> string
                                 
    (* value_to_string ?printenvp value -- Returns a printable string
       representation of a value; the optional flag `printenvp`
       (default: `true`) determines whether to include the environment
       in the string representation when called on a closure *)
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : ENV =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    let empty () : env = []

    let close (exp : expr) (env : env) : value =
      Closure (exp, env)

    let lookup (env : env) (varname : varid) : value =
      match List.assoc_opt varname env with
      | Some res -> !res
      | None -> raise (EvalError "varid not found")

    let extend (env : env) (varname : varid) (loc : value ref) : env =
      (varname, loc) :: List.filter (fun (var, _val_ref) -> var <> varname) env

    let rec value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with
      | Val exp -> exp_to_concrete_string exp
      | Closure (exp, env) ->
        let exp_str = exp_to_concrete_string exp in
        if printenvp then "[" ^ env_to_string env ^ " âŠ¢ " ^ exp_str ^ "]"
        else exp_str
    and env_to_string (env : env) : string =
      let count = ref (List.length env) in
      let str_contents =
        List.fold_left
          (fun acc (var, val_ref) ->
             let substr = acc ^ var ^  " -> " ^ value_to_string !val_ref in
             if !count <= 1 then substr
             else (count := !count - 1; substr ^ "; "))
          "" env
      in "{" ^ str_contents ^ "}"
  end
;;


(*......................................................................
  Evaluation functions

  Each of the evaluation functions below evaluates an expression `exp`
  in an environment `env` returning a result of type `value`. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a `value` and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type `expr -> Env.env -> Env.value` for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). 

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as `eval_e` below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)
   
(* extract -- Extracts an Expr.expr contained within a Env.value *)
let extract (value : Env.value) : expr =
  match value with
  | Env.Val exp
  | Env.Closure (exp, _) -> exp ;;

(* eval_all -- Evaluator for expressions independent of semantics *)
let eval_all
      (eval : Expr.expr -> Env.env -> Env.value)
      (exp : expr)
      (env : Env.env)
    : Env.value = 
  match exp with
  | Num _ | Float _ | Bool _ | String _ | Unit -> Env.Val exp
  | Sequence (e1, e2) ->
    (match eval e1 env |> extract with
     | Unit -> eval e2 env
     | _ -> raise (EvalError "invalid sequence"))
  | Unop (u, e) ->
    let res_exp =
      match u, eval e env |> extract with
      | Negate, Num n -> Num ~-n
      | NegateFloat, Float n -> Float ~-.n
      | Not, Bool b -> Bool (not b)
      | NaturalLog, Float f -> Float (log f)
      | Sine, Float f -> Float (sin f)
      | Cosine, Float f -> Float (cos f)
      | Tangent, Float f -> Float (tan f)
      | PrintString, String s -> print_string s; Unit
      | PrintEndline, String s -> print_endline s; Unit
      | _ -> raise (EvalError "invalid unop")
    in Env.Val res_exp
  | Binop (b, e1, e2) ->
    let res_exp =
      match b, eval e1 env |> extract, eval e2 env |> extract with
      | Plus, Num n1, Num n2 -> Num (n1 + n2)
      | PlusFloat, Float n1, Float n2 -> Float (n1 +. n2)
      | Minus, Num n1, Num n2 -> Num (n1 - n2)
      | MinusFloat, Float n1, Float n2 -> Float (n1 -. n2)
      | Times, Num n1, Num n2 -> Num (n1 * n2)
      | TimesFloat, Float n1, Float n2 -> Float (n1 *. n2)
      | Divides, Num n1, Num n2 -> Num (n1 / n2)
      | DividesFloat, Float n1, Float n2 -> Float (n1 /. n2)
      | Power, Float n1, Float n2 -> Float (n1 ** n2)
      | Equals, Num n1, Num n2 -> Bool (n1 = n2)
      | Equals, Float n1, Float n2 -> Bool (n1 = n2)
      | Equals, Bool n1, Bool n2 -> Bool (n1 = n2)
      | Equals, String n1, String n2 -> Bool (n1 = n2)
      | NotEquals, Num n1, Num n2 -> Bool (n1 <> n2)
      | NotEquals, Float n1, Float n2 -> Bool (n1 <> n2)
      | NotEquals, Bool n1, Bool n2 -> Bool (n1 <> n2)
      | NotEquals, String n1, String n2 -> Bool (n1 <> n2)
      | LessThan, Num n1, Num n2 -> Bool (n1 < n2)
      | LessThan, Float n1, Float n2 -> Bool (n1 < n2)
      | LessThan, String n1, String n2 -> Bool (n1 < n2)
      | GreaterThan, Num n1, Num n2 -> Bool (n1 > n2)
      | GreaterThan, Float n1, Float n2 -> Bool (n1 > n2)
      | GreaterThan, String n1, String n2 -> Bool (n1 > n2)
      | LessThanEquals, Num n1, Num n2 -> Bool (n1 <= n2)
      | LessThanEquals, Float n1, Float n2 -> Bool (n1 <= n2)
      | LessThanEquals, String n1, String n2 -> Bool (n1 <= n2)
      | GreaterThanEquals, Num n1, Num n2 -> Bool (n1 >= n2)
      | GreaterThanEquals, Float n1, Float n2 -> Bool (n1 >= n2)
      | GreaterThanEquals, String n1, String n2 -> Bool (n1 >= n2)
      | Concatenate, String s1, String s2 -> String (s1 ^ s2)
      | _ -> raise (EvalError "invalid binop")
    in Env.Val res_exp
  | Conditional (e1, e2, e3) ->
    (match eval e1 env |> extract with
     | Bool true -> eval e2 env
     | Bool false -> eval e3 env
     | _ -> raise (EvalError "invalid conditional"))
  | Raise -> raise EvalException
  | Unassigned -> raise (EvalError "invalid unassigned")
  | Var _ | Lazy _ | Fun _ | FunUnit _ | Let _ | Letrec _ | App _ ->
    eval exp env ;;

let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

(* The SUBSTITUTION MODEL evaluator -- to be completed *)
   
let rec eval_s (exp : expr) (env : Env.env) : Env.value =
  match exp with
  | Num _ | Float _ | Bool _ | String _ | Unit | Sequence _ | Unop _ | Binop _
  | Conditional _ | Raise | Unassigned -> eval_all eval_s exp env
  | Var _ -> raise (EvalError "invalid var")
  | Lazy _ -> raise (EvalError "lazy expressions not supported; use eval_e")
  | Fun _ | FunUnit _ -> Env.Val exp
  | Let (v, e1, e2) ->
    let repl_exp = eval_s e1 env |> extract
    in let subst_exp = subst v repl_exp e2
    in eval_s subst_exp env
  | Letrec (v, e1, e2) ->
    let repl_exp =
      let e1_eval = eval_s e1 env |> extract
      in subst v (Letrec (v, e1_eval, Var v)) e1_eval
    in let subst_exp = subst v repl_exp e2
    in eval_s subst_exp env
  | App (e1, e2) ->
    match eval_s e1 env |> extract, eval_s e2 env |> extract with
    | Fun (v, e), repl_exp ->
      let subst_exp = subst v repl_exp e
      in eval_s subst_exp env
    | FunUnit (Unit, e), Unit -> eval_s e env
    | _ -> raise (EvalError "invalid app") ;;
     
(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator -- to be
   completed *)
   
let rec eval_d (exp : expr) (env : Env.env) : Env.value =
  match exp with
  | Num _ | Float _ | Bool _ | String _ | Unit | Sequence _ | Unop _ | Binop _
  | Conditional _ | Raise | Unassigned -> eval_all eval_d exp env
  | Var v -> Env.lookup env v
  | Lazy _ -> raise (EvalError "lazy expressions not supported; use eval_e")
  | Fun _ | FunUnit _ -> Env.Val exp
  | Let (v, e1, e2)
  | Letrec (v, e1, e2) ->
    let repl_exp = eval_d e1 env
    in let ext_env = Env.extend env v (ref repl_exp)
    in eval_d e2 ext_env
  | App (e1, e2) ->
    match eval_d e1 env |> extract, eval_d e2 env with
    | Fun (v, e), repl_exp ->
      let ext_env = ref repl_exp |> Env.extend env v
      in eval_d e ext_env
    | FunUnit (Unit, e), Env.Val Unit -> eval_d e env
    | _ -> raise (EvalError "invalid app") ;;
       
(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)
   
let rec eval_l (exp : expr) (env : Env.env) : Env.value =
  match exp with
  | Num _ | Float _ | Bool _ | String _ | Unit | Sequence _ | Unop _ | Binop _
  | Conditional _ | Raise | Unassigned -> eval_all eval_l exp env
  | Var v -> Env.lookup env v
  | Lazy _ -> raise (EvalError "lazy expressions not supported; use eval_e")
  | Fun _ | FunUnit _ -> Env.close exp env
  | Let (v, e1, e2) ->
    let repl_exp = eval_l e1 env
    in let ext_env = Env.extend env v (ref repl_exp)
    in eval_l e2 ext_env
  | Letrec (v, e1, e2) ->
    let ref_v = ref (Env.Val Unassigned)
    in let ext_env = Env.extend env v ref_v
    in let def_e1 = eval_l e1 ext_env in
    if def_e1 = Env.Val Unassigned then raise (EvalError "invalid letrec")
    else ref_v := def_e1; eval_l e2 ext_env
  | App (e1, e2) ->
    match eval_l e1 env, eval_l e2 env with
    | Env.Closure (Fun (v, e), closure_env), repl_exp ->
      let ext_env = ref repl_exp |> Env.extend closure_env v
      in eval_l e ext_env
    | Env.Closure (FunUnit (Unit, e), closure_env), Env.Val Unit ->
      eval_l e closure_env
    | _ -> raise (EvalError "invalid app") ;;

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within `eval_s`, `eval_d`, or `eval_l`. *)

let rec eval_e (exp : expr) (env : Env.env) : Env.value =
  match exp with
  | Num _ | Float _ | Bool _ | String _ | Unit | Sequence _ | Binop _
  | Conditional _ | Raise | Unassigned -> eval_all eval_e exp env
  | Var v -> Env.lookup env v
  | Lazy _ | Fun _ | FunUnit _ -> Env.close exp env
  | Unop (u, e) ->
    (match u, eval_e e env with
     | Force, Env.Closure (Lazy e, env_closure) ->
       let res = eval_e !e env_closure
       in e := extract res; res
     | Force, _ -> raise (EvalError "invalid lazy")
     | _ -> eval_all eval_e exp env)
  | Let (v, e1, e2) ->
    let repl_exp = eval_e e1 env
    in let ext_env = Env.extend env v (ref repl_exp)
    in eval_e e2 ext_env
  | Letrec (v, e1, e2) ->
    let ref_v = ref (Env.Val Unassigned)
    in let ext_env = Env.extend env v ref_v
    in let def_e1 = eval_e e1 ext_env in
    if def_e1 = Env.Val Unassigned then raise (EvalError "invalid letrec")
    else ref_v := def_e1; eval_e e2 ext_env
  | App (e1, e2) ->
    match eval_e e1 env, eval_e e2 env with
    | Env.Closure (Fun (v, e), closure_env), repl_exp ->
      let ext_env = ref repl_exp |> Env.extend closure_env v
      in eval_e e ext_env
    | Env.Closure (FunUnit (Unit, e), closure_env), Env.Val Unit ->
      eval_e e closure_env
    | _ -> raise (EvalError "invalid app") ;;
  
(* Connecting the evaluators to the external world. The REPL in
   `miniml.ml` uses a call to the single function `evaluate` defined
   here. Initially, `evaluate` is the trivial evaluator `eval_t`. But
   you can define it to use any of the other evaluators as you proceed
   to implement them. (We will directly unit test the four evaluators
   above, not the `evaluate` function, so it doesn't matter how it's
   set when you submit your solution.) *)
   
let evaluate = eval_t ;;
